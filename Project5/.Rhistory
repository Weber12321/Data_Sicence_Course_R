theme(legend.position="none") + theme_grey() +
geom_label(stat='count', aes(label=..count..))
ggplot(train[!is.na(train$survived),], aes(x = sex, fill = survived)) +
geom_bar(stat='count', position='dodge') + theme_grey() +
labs(x = 'Train data') +
geom_label(stat='count', aes(label=..count..))
## embarked ##
train$embarked <- train$embarked %>% as.factor
summary(train$embarked[train$survived==0])
summary(train$embarked[train$survived==1])
embark <- cbind(summary(train$embarked[train$survived==0]),summary(train$embarked[train$survived==1]))
embark <- embark[-1,] %>% t
rownames(embark) <- c("0","1")
barplot(embark,col=c("gray","black"),main="embarked variable",beside=TRUE,ylab="counts")
legend("topright", inset=.02,title="Survive",
c("0","1"), fill=c("gray","black"), horiz=TRUE, cex=0.8)
family <- train$parch + train$sibsp + 1
train <- cbind(train,family)
ps0 <- train$family[train$survived==0] %>% as.factor %>% summary
ps1 <- train$family[train$survived==1] %>% as.factor %>% summary %>% c(.,0)
family <- rbind(ps0,ps1)
rm(ps0)
rm(ps1)
barplot(family,col=c("gray","black"),main="family",beside=TRUE,ylab="counts",xlab="Number of people")
legend("topright", inset=.02,title="Survive",
c("0","1"), fill=c("gray","black"), horiz=TRUE, cex=0.8)
train[!is.na(train$survived),]
# Pclass
ggplot(train[!is.na(train$survived),], aes(x = pclass, fill = survived)) +
geom_bar(stat='count', position='dodge') + labs(x = 'Train data') +
theme(legend.position="none") + theme_grey() +
geom_label(stat='count', aes(label=..count..))
# Pclass
ggplot(train[!is.na(train$survived),], aes(x = pclass, fill = survived)) +
geom_bar(stat='count', position='dodge') + labs(x = 'pClass') +
theme(legend.position="none") + theme_grey() +
geom_label(stat='count', aes(label=..count..))
# Sex
ggplot(train[!is.na(train$survived),], aes(x = sex, fill = survived)) +
geom_bar(stat='count', position='dodge') + theme_grey() +
labs(x = 'Train data') +
geom_label(stat='count', aes(label=..count..))
#first we rename all boats with number 1 to 28
#tranfer original boat numbers to 1:27, 28 refer to NA
train$boat[all$boat == "5 7"] <- "17"
#first we rename all boats with number 1 to 28
#tranfer original boat numbers to 1:27, 28 refer to NA
train <- read.csv("titanicTrain2.csv", stringsAsFactors = F, na.strings = c("NA", ""))
#first we rename all boats with number 1 to 28
#tranfer original boat numbers to 1:27, 28 refer to NA
train <- read.csv("titanicQuestion.csv", stringsAsFactors = F, na.strings = c("NA", ""))
#first we rename all boats with number 1 to 28
#tranfer original boat numbers to 1:27, 28 refer to NA
train <- read.csv("titanicTrain.csv", stringsAsFactors = F, na.strings = c("NA", ""))
View(train)
train <- read.csv("titanicTrain.csv", stringsAsFactors = F, na.strings = c("NA", ""))
train <- train[c(1:1000),]
# Train data 上面的NA
str(train)
sapply(train, function(x) {sum(is.na(x))})
# Pclass
ggplot(train[!is.na(train$survived),], aes(x = pclass, fill = survived)) +
geom_bar(stat='count', position='dodge') + labs(x = 'pClass') +
theme(legend.position="none") + theme_grey() +
geom_label(stat='count', aes(label=..count..))
# Sex
ggplot(train[!is.na(train$survived),], aes(x = sex, fill = survived)) +
geom_bar(stat='count', position='dodge') + theme_grey() +
labs(x = 'Train data') +
geom_label(stat='count', aes(label=..count..))
## embarked ##
train$embarked <- train$embarked %>% as.factor
summary(train$embarked[train$survived==0])
summary(train$embarked[train$survived==1])
embark <- cbind(summary(train$embarked[train$survived==0]),summary(train$embarked[train$survived==1]))
embark <- embark[-1,] %>% t
rownames(embark) <- c("0","1")
barplot(embark,col=c("gray","black"),main="embarked variable",beside=TRUE,ylab="counts")
legend("topright", inset=.02,title="Survive",
c("0","1"), fill=c("gray","black"), horiz=TRUE, cex=0.8)
train <- read.csv("titanicTrain.csv")
train <- train[c(1:1000),]
# Train data 上面的NA
str(train)
sapply(train, function(x) {sum(is.na(x))})
# Pclass
ggplot(train[!is.na(train$survived),], aes(x = pclass, fill = survived)) +
geom_bar(stat='count', position='dodge') + labs(x = 'pClass') +
theme(legend.position="none") + theme_grey() +
geom_label(stat='count', aes(label=..count..))
# Sex
ggplot(train[!is.na(train$survived),], aes(x = sex, fill = survived)) +
geom_bar(stat='count', position='dodge') + theme_grey() +
labs(x = 'Train data') +
geom_label(stat='count', aes(label=..count..))
## embarked ##
train$embarked <- train$embarked %>% as.factor
summary(train$embarked[train$survived==0])
summary(train$embarked[train$survived==1])
embark <- cbind(summary(train$embarked[train$survived==0]),summary(train$embarked[train$survived==1]))
embark <- embark[-1,] %>% t
barplot(embark,col=c("gray","black"),main="embarked variable",beside=TRUE,ylab="counts")
rownames(embark) <- c("0","1")
legend("topright", inset=.02,title="Survive",
c("0","1"), fill=c("gray","black"), horiz=TRUE, cex=0.8)
family <- train$parch + train$sibsp + 1
train <- cbind(train,family)
ps0 <- train$family[train$survived==0] %>% as.factor %>% summary
ps1 <- train$family[train$survived==1] %>% as.factor %>% summary %>% c(.,0)
family <- rbind(ps0,ps1)
rm(ps0)
rm(ps1)
barplot(family,col=c("gray","black"),main="family",beside=TRUE,ylab="counts",xlab="Number of people")
legend("topright", inset=.02,title="Survive",
c("0","1"), fill=c("gray","black"), horiz=TRUE, cex=0.8)
View(train)
train$boat
#first we rename all boats with number 1 to 28
#tranfer original boat numbers to 1:27, 28 refer to NA
train$boat[train$boat == "5 7"] <- "17"
View(train)
## boat ##
# 登船與否
Onboat <- train[train$boat==""]
train$boat
## boat ##
# 登船與否
Onboat <- train$boat[train$boat==""]
## boat ##
# 登船與否
Onboat <- train$boat[train$boat!=""]
## boat ##
# 登船與否
Onboat <- summary(train$boat[train$boat!=""])
Onboat
## boat ##
# 登船與否
Onboat <- summary(train$boat[train$boat!=""])
notOnboat <- summary(train$boat[train$boat==""])
notOnboat
train$boat==""
## boat ##
# 登船與否
onboat <- train$boat[train$boat!=""]
onboat
ps0 <- train$boat[train$survived==0] %>% as.factor %>% summary
ps0 <- train$boat[train$boat!=""&&train$survived==0] %>% as.factor %>% summary
ps0
train$boat[train$boat!=""] <- "onboat"
#load data
train <- read.csv("titanicTrain.csv", stringsAsFactors = F, na.strings = c("NA", ""))
test <- read.csv("titanicQuestion.csv", stringsAsFactors = F, na.strings = c("NA", ""))
train <- train[c(1:1000),]
#bind the data
all <- rbind(train, test)
#as factor
all$sex <- as.factor(all$sex)
all$survived <- as.factor(all$survived)
#first we rename all boats with number 1 to 28
#tranfer original boat numbers to 1:27, 28 refer to NA
all$boat[all$boat == "5 7"] <- "17"
all$boat[all$boat == "5 9"] <- "18"
all$boat[all$boat == "8 10"] <- "19"
all$boat[all$boat == "13 15"] <- "20"
all$boat[all$boat == "13 15 B"] <- "21"
all$boat[all$boat == "15 16"] <- "22"
all$boat[all$boat == "C"] <- "25"
all$boat[all$boat == "A"] <- "23"
all$boat[all$boat == "D"] <- "26"
all$boat[all$boat == "B"] <- "24"
all$boat[all$boat == "C D"] <- "27"
all$boat[is.na(all$boat)] <- "28"
#escape = 1 refer to the refugee who successfully took on boat
all$escape[all$boat != "28"] <- "1"
all$escape[all$boat == "28"] <- "0"
#see if taking boat is highly related survived
b1 <- ggplot(all[!is.na(all$survived),], aes(x = escape, fill = survived)) +
geom_bar(stat='count', position='dodge') + theme_grey() +
labs(x = 'escape from ship') +
geom_label(stat='count', aes(label=..count..))
b1
#subset of those who took on boat
survived_boat <- subset(all, all$boat != "28")
#see if there anyone who took on boat and didn't survive
b2 <- ggplot(survived_boat[!is.na(survived_boat$survived),], aes(x = boat, fill = survived)) +
geom_bar(stat='count', position='dodge') +
labs(x = 'boat_survive') + theme_grey()
b2
s
s
s
s
s
train <- read.csv("titanicTrain.csv")
train <- train[c(1:1000),]
# Train data 上面的NA
str(train)
sapply(train, function(x) {sum(is.na(x))})
# Pclass
ggplot(train[!is.na(train$survived),], aes(x = pclass, fill = survived)) +
geom_bar(stat='count', position='dodge') + labs(x = 'pClass') +
theme(legend.position="none") + theme_grey() +
geom_label(stat='count', aes(label=..count..))
# Sex
ggplot(train[!is.na(train$survived),], aes(x = sex, fill = survived)) +
geom_bar(stat='count', position='dodge') + theme_grey() +
labs(x = 'Train data') +
geom_label(stat='count', aes(label=..count..))
## embarked ##
train$embarked <- train$embarked %>% as.factor
summary(train$embarked[train$survived==0])
summary(train$embarked[train$survived==1])
embark <- cbind(summary(train$embarked[train$survived==0]),summary(train$embarked[train$survived==1]))
embark <- embark[-1,] %>% t
rownames(embark) <- c("0","1")
family <- train$parch + train$sibsp + 1
barplot(embark,col=c("gray","black"),main="embarked variable",beside=TRUE,ylab="counts")
legend("topright", inset=.02,title="Survive",
c("0","1"), fill=c("gray","black"), horiz=TRUE, cex=0.8)
# Pclass
ggplot(train[!is.na(train$survived),], aes(x = pclass, fill = survived)) +
geom_bar(stat='count', position='dodge') + labs(x = 'pClass') +
theme(legend.position="none") + theme_grey() +
geom_label(stat='count', aes(label=..count..))
library(datasets)
library(devtools)
library(nnet)
library(ggplot2)
source_url('https://gist.githubusercontent.com/Peque/41a9e20d6687f2f3108d/raw/85e14f3a292e126f1454864427e3a189c2fe33f3/nnet_plot_update.r')
data <- read.csv("wine.data.txt")
colnames(data) <- c("class", "Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
setwd("~/GitHub/NTU-CSX-DataScience--Group5/Project5")
# Load data from wine data set
data <- read.csv("wine.data.txt")
colnames(data) <- c("class", "Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
# Load data from wine data set
data <- read.csv("wine.data.txt")
colnames(data) <- c("class", "Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids", "Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
View(data)
View(data)
# 資料切割: 將資料切成traindata(70%) -> 之後利用nnet套件進行學習
# 資料切割: 將剩餘資料列為testdata，並使用模型進行預測Class(最後再來對答案)
n <- nrow(data)
t_size = round(0.7 * n)
t_idx <- sample(seq_len(n), size = t_size)
traindata <- data[t_idx,]
testdata <- data[ - t_idx,]
# 建立模型
nnetM <- nnet(formula = class ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = traindata)
#(3)畫圖
plot.nnet(nnetM, wts.only = F)
library(datasets)
library(devtools)
library(nnet)
library(ggplot2)
source_url('https://gist.githubusercontent.com/Peque/41a9e20d6687f2f3108d/raw/85e14f3a292e126f1454864427e3a189c2fe33f3/nnet_plot_update.r')
#(3)畫圖
plot.nnet(nnetM, wts.only = F)
#(4)預測
#test組執行預測
prediction <- predict(nnetM, testdata, type = 'class')
#預測結果
cm <- table(x = testdata$Species, y = prediction, dnn = c("實際", "預測"))
#(4)預測
#test組執行預測
prediction <- predict(nnetM, testdata, type = 'class')
# 建立模型
nnetM <- nnet(formula = class ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = traindata)
library(magrittr)
data$class <- data$class %>% as.factor()
traindata <- data[t_idx,]
testdata <- data[ - t_idx,]
# 建立模型
nnetM <- nnet(formula = class ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = traindata)
# 畫圖
plot.nnet(nnetM, wts.only = F)
# 畫圖
plot.nnet(nnetM, wts.only = F)
# 建立模型
nnetM <- nnet(formula = class ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = traindata)
plot.nnet(nnetM, wts.only = F)
prediction <- predict(nnetM, testdata, type = 'class')
#預測結果
cm <- table(x = testdata$class, y = prediction, dnn = c("實際", "預測"))
cm
testdata <- data[ - t_idx,]
# 建立模型
nnetM <- nnet(formula = class ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = traindata)
plot.nnet(nnetM, wts.only = F)
prediction <- predict(nnetM, testdata, type = 'class')
#預測結果
cm <- table(x = testdata$class, y = prediction, dnn = c("實際", "預測"))
cm
#整理資料
data$Class1 <- ifelse(data$class == "1", 1, 0)
data$Class2 <- ifelse(data$class == "2", 1, 0)
data$Class3 <- ifelse(data$class == "3", 1, 0)
View(data)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  "Alcohol" + "Malic acid" + "Ash" + "Alcalinity of ash" + "Magnesium" + "Total phenols" + "Flavanoids" + "Nonflavanoid phenols"+ "Proanthocyanins"+  "Color intensity"+ "Hue"+ "OD280/OD315 of diluted wines"+ "Proline" ')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
library("neuralnet")
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  "Alcohol" + "Malic acid" + "Ash" + "Alcalinity of ash" + "Magnesium" + "Total phenols" + "Flavanoids" + "Nonflavanoid phenols"+ "Proanthocyanins"+  "Color intensity"+ "Hue"+ "OD280/OD315 of diluted wines"+ "Proline" ')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
f1
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,10),learningrate = 0.01)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  "Alcohol" + "Malic acid" + "Ash" + "Alcalinity of ash" )
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  "Alcohol" + "Malic acid" + "Ash" + "Alcalinity of ash" ')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,10),learningrate = 0.01)
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  "Alcohol" + "Malic acid" + "Ash" + "Alcalinity of ash" ')
f1
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  Alcohol + Malic acid + Ash + Alcalinity of ash ')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  Alcohol + Malic acid + Ash + Alcalinity of ash ')
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  Alcohol + Malic acid + Ash + Alcalinity of ash ')
library(datasets)
library(devtools)
library(nnet)
library(ggplot2)
library(magrittr)
source_url('https://gist.githubusercontent.com/Peque/41a9e20d6687f2f3108d/raw/85e14f3a292e126f1454864427e3a189c2fe33f3/nnet_plot_update.r')
# Load data from wine data set
data <- read.csv("wine.data.txt")
colnames(data) <- c("class", "Alcohol", "Malic_acid", "Ash", "Alcalinity_of_ash", "Magnesium", "Total_phenols", "Flavanoids", "Nonflavanoid_phenols", "Proanthocyanins", "Color_intensity", "Hue", "OD280/OD315_of_diluted_wines", "Proline")
data$class <- data$class %>% as.factor()
# 資料切割: 將資料切成traindata(70%) -> 之後利用nnet套件進行學習
# 資料切割: 將剩餘資料列為testdata(30%)，並使用模型進行預測class(最後再來對答案)
n <- nrow(data)
t_size = round(0.7 * n)
t_idx <- sample(seq_len(n), size = t_size)
traindata <- data[t_idx,]
testdata <- data[ - t_idx,]
# 利用traindata建立類神經網路模型
nnetM <- nnet(formula = class ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = traindata)
# 畫圖
plot.nnet(nnetM, wts.only = F)
# 對於testdata進行預測
prediction <- predict(nnetM, testdata, type = 'class')
# 預測結果與實際結果<對答案>
cm <- table(x = testdata$class, y = prediction, dnn = c("實際", "預測"))
cm
library("neuralnet")
#整理資料
data$Class1 <- ifelse(data$class == "1", 1, 0)
data$Class2 <- ifelse(data$class == "2", 1, 0)
data$Class3 <- ifelse(data$class == "3", 1, 0)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  Alcohol + Malic acid + Ash + Alcalinity of ash ')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  Alcohol + Malic_acid + Ash + Alcalinity_of_ash ')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
print(bpn)
data$
#圖解BP
plot(bpn)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  Alcohol + Malic_acid + Ash + Alcalinity_of_ash +"Magnesium" ')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,5),learningrate = 0.01)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  Alcohol + Malic_acid + Ash + Alcalinity_of_ash  ')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
print(bpn)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  Alcohol + Malic_acid + Ash + Alcalinity_of_ash')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  class + Alcohol + Malic_acid + Ash + Alcalinity_of_ash + Magnesium + Total_phenols + Flavanoids + Nonflavanoid_phenols + Proanthocyanins + Color_intensity + Hue + OD280/OD315_of_diluted_wines + Proline')
model <- train(form = f1, data = traindata, method = "neuralnet",
tuneGrid = expand.grid(.layer1 = c(1:4), .layer2 = c(1:4), .layer3 = c(0)), learningrate = 0.01)
library(caret)
install.packages("caret")
library(caret)
model <- train(form = f1, data = traindata, method = "neuralnet",
tuneGrid = expand.grid(.layer1 = c(1:4), .layer2 = c(1:4), .layer3 = c(0)), learningrate = 0.01)
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  class + Alcohol + Malic_acid + Ash + Alcalinity_of_ash + Magnesium + Total_phenols + Flavanoids + Nonflavanoid_phenols + Proanthocyanins + Color_intensity + Hue + OD280/OD315_of_diluted_wines + Proline')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
# Load data from wine data set
data <- read.csv("wine.data.txt")
colnames(data) <- c("class", "Alcohol", "Malic_acid", "Ash", "Alcalinity_of_ash", "Magnesium", "Total_phenols", "Flavanoids", "Nonflavanoid_phenols", "Proanthocyanins", "Color_intensity", "Hue", "OD280/OD315_of_diluted_wines", "Proline")
data$class <- data$class %>% as.factor()
# 資料切割: 將資料切成traindata(70%) -> 之後利用nnet套件進行學習
# 資料切割: 將剩餘資料列為testdata(30%)，並使用模型進行預測class(最後再來對答案)
n <- nrow(data)
t_size = round(0.7 * n)
t_idx <- sample(seq_len(n), size = t_size)
traindata <- data[t_idx,]
testdata <- data[ - t_idx,]
# 利用traindata建立類神經網路模型
nnetM <- nnet(formula = class ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = traindata)
# 畫圖
plot.nnet(nnetM, wts.only = F)
# 對於testdata進行預測
prediction <- predict(nnetM, testdata, type = 'class')
# 預測結果與實際結果<對答案>
cm <- table(x = testdata$class, y = prediction, dnn = c("實際", "預測"))
cm
# 畫圖
plot.nnet(nnetM, wts.only = F)
# 利用traindata建立類神經網路模型
nnetM <- nnet(formula = class ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = traindata)
# 畫圖
plot.nnet(nnetM, wts.only = F)
# 對於testdata進行預測
prediction <- predict(nnetM, testdata, type = 'class')
# 預測結果與實際結果<對答案>
cm <- table(x = testdata$class, y = prediction, dnn = c("實際", "預測"))
cm
library("neuralnet")
#整理資料
data$Class1 <- ifelse(data$class == "1", 1, 0)
data$Class2 <- ifelse(data$class == "2", 1, 0)
data$Class3 <- ifelse(data$class == "3", 1, 0)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  class + Alcohol + Malic_acid + Ash + Alcalinity_of_ash + Magnesium + Total_phenols + Flavanoids + Nonflavanoid_phenols + Proanthocyanins + Color_intensity + Hue + OD280/OD315_of_diluted_wines + Proline')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
install.packages("caret")
install.packages("caret")
library(caret)
install.packages("caret")
install.packages("yaml")
library(yaml)
install.packages("caret")
library(caret)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  class + Alcohol + Malic_acid + Ash + Alcalinity_of_ash + Magnesium + Total_phenols + Flavanoids + Nonflavanoid_phenols + Proanthocyanins + Color_intensity + Hue + OD280/OD315_of_diluted_wines + Proline')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
library("neuralnet")
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
model <- train(form = f1, data = traindata, method = "neuralnet",
tuneGrid = expand.grid(.layer1 = c(1:4), .layer2 = c(1:4), .layer3 = c(0)), learningrate = 0.01)
traindata <- data[t_idx,]
testdata <- data[ - t_idx,]
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  class + Alcohol + Malic_acid + Ash + Alcalinity_of_ash + Magnesium + Total_phenols + Flavanoids + Nonflavanoid_phenols + Proanthocyanins + Color_intensity + Hue + OD280/OD315_of_diluted_wines + Proline')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
library(yaml)
library(caret)
model <- train(form = f1, data = traindata, method = "neuralnet",
tuneGrid = expand.grid(.layer1 = c(1:4), .layer2 = c(1:4), .layer3 = c(0)), learningrate = 0.01)
(
# Load data from wine data set
data <- read.csv("wine.data.txt")
colnames(data) <- c("class", "Alcohol", "Malic_acid", "Ash", "Alcalinity_of_ash", "Magnesium", "Total_phenols", "Flavanoids", "Nonflavanoid_phenols", "Proanthocyanins", "Color_intensity", "Hue", "OD", "Proline")
data$class <- data$class %>% as.factor()
library(datasets)
library(devtools)
library(nnet)
library(ggplot2)
library(magrittr)
source_url('https://gist.githubusercontent.com/Peque/41a9e20d6687f2f3108d/raw/85e14f3a292e126f1454864427e3a189c2fe33f3/nnet_plot_update.r')
# Load data from wine data set
data <- read.csv("wine.data.txt")
colnames(data) <- c("class", "Alcohol", "Malic_acid", "Ash", "Alcalinity_of_ash", "Magnesium", "Total_phenols", "Flavanoids", "Nonflavanoid_phenols", "Proanthocyanins", "Color_intensity", "Hue", "OD", "Proline")
data$class <- data$class %>% as.factor()
# 資料切割: 將資料切成traindata(70%) -> 之後利用nnet套件進行學習
# 資料切割: 將剩餘資料列為testdata(30%)，並使用模型進行預測class(最後再來對答案)
n <- nrow(data)
t_size = round(0.7 * n)
t_idx <- sample(seq_len(n), size = t_size)
traindata <- data[t_idx,]
testdata <- data[ - t_idx,]
# 利用traindata建立類神經網路模型
nnetM <- nnet(formula = class ~ ., linout = T, size = 3, decay = 0.001, maxit = 1000, trace = T, data = traindata)
# 畫圖
plot.nnet(nnetM, wts.only = F)
# 對於testdata進行預測
prediction <- predict(nnetM, testdata, type = 'class')
# 預測結果與實際結果<對答案>
cm <- table(x = testdata$class, y = prediction, dnn = c("實際", "預測"))
cm
library("neuralnet")
#整理資料
data$Class1 <- ifelse(data$class == "1", 1, 0)
data$Class2 <- ifelse(data$class == "2", 1, 0)
data$Class3 <- ifelse(data$class == "3", 1, 0)
traindata <- data[t_idx,]
testdata <- data[ - t_idx,]
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  class + Alcohol + Malic_acid + Ash + Alcalinity_of_ash + Magnesium + Total_phenols + Flavanoids + Nonflavanoid_phenols + Proanthocyanins + Color_intensity + Hue + OD280/OD315_of_diluted_wines + Proline')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  class + Alcohol + Malic_acid + Ash + Alcalinity_of_ash + Magnesium + Total_phenols + Flavanoids + Nonflavanoid_phenols + Proanthocyanins + Color_intensity + Hue + OD + Proline')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
library(yaml)
library(caret)
model <- train(form = f1, data = traindata, method = "neuralnet",
tuneGrid = expand.grid(.layer1 = c(1:4), .layer2 = c(1:4), .layer3 = c(0)), learningrate = 0.01)
model
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  class + Alcohol + Malic_acid + Ash + Alcalinity_of_ash + Magnesium + Total_phenols + Flavanoids + Nonflavanoid_phenols + Proanthocyanins + Color_intensity + Hue + OD + Proline')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
str(data)
data$Class1 <- data$Class1 %>% as.factor()
data$Class2 <- data$Class2 %>% as.factor()
data$Class3 <- data$Class3 %>% as.factor()
#訓練模型
f1 <- as.formula('Class1 + Class2 + Class3  ~  class + Alcohol + Malic_acid + Ash + Alcalinity_of_ash + Magnesium + Total_phenols + Flavanoids + Nonflavanoid_phenols + Proanthocyanins + Color_intensity + Hue + OD + Proline')
bpn <- neuralnet(formula = f1, data = data, hidden = c(2,4),learningrate = 0.01)
cm
